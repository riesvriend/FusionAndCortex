@using Cortex.Net.Blazor
@using Templates.Blazor2.Abstractions
@attribute [Observer]
@implements IHandleEvent
@inject TodoPageStore todoPageStore

@{
    Debug.WriteLine($"Rendering Item {Newtonsoft.Json.JsonConvert.SerializeObject(Item)}");
}

<Addons Margin="Margin.Is3.OnY">
    <Addon AddonType="AddonType.Start">
        <AddonLabel>
            <Blazorise.Icon Name="@(Item.IsDone ? FontAwesomeIcons.CheckSquare : FontAwesomeIcons.Square)"
                            @onclick="_ => todoPageStore.ToggleDone(Item)" />
        </AddonLabel>
    </Addon>
    <TextEdit TextChanged="text => todoPageStore.UpdateTitle(Item, text)" ChangeTextOnKeyPress="false"
              Text="@Item.Title" />
    <Addon AddonType="AddonType.End">
        <Button Clicked="_ => todoPageStore.Remove(Item)" Color="Color.Warning">
            <Blazorise.Icon Name="FontAwesomeIcons.Minus" />
        </Button>
    </Addon>
</Addons>

@code {
    [Parameter, ParameterComparer(typeof(ByValueParameterComparer))]
    public Todo Item { get; set; } = null!;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        // The TextEdit component is a 'controlled component' in React terms. This means that on a rerender
        // the current value from the store/model is pushed in the the text field, potentially overriding the users pending input.
        // To prevent resetting the user's input, we suppress StateHasChanged render triggers to the text box unless the todo
        // item really changed in the store. If the item has not changed by value, we don't call the base method which would
        // in turn call this.StateHasChanged and render.
        if (this.HasChangedParameters(parameters))
            return base.SetParametersAsync(parameters);
        else
            return Task.CompletedTask;
    }

    // https://github.com/dotnet/aspnetcore/issues/18919
    Task IHandleEvent.HandleEventAsync(EventCallbackWorkItem callback, object? arg)
        // Similary, on tabbing out of the text box, suppress the call to StateHasChanged that the Blazor
        // framework normally does.
        => callback.InvokeAsync(arg);
}
