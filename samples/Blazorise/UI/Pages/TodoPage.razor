@page "/todo"
@using System.Threading
@using Templates.Blazor2.Abstractions
@using Cortex.Net.Blazor
@using Templates.Blazor2.UI.Stores
@inject ITodoService Todos
@inject Session Session
@inject AuthStateProvider AuthStateProvider

@attribute [Observer]
@inject AppStore appStore
@inject TodoPageStore todoPageStore

@{
    todoPageStore.SetComponent(this); // hack to get correct SyncContext
    Debug.WriteLine("Rendering TodoPage");
}
<h1>Todo List</h1>

<FusionStateStatusBadge FusionStateStatus="@todoPageStore.FusionStateStatus" />

<Text Margin="Margin.Is1.OnY">
    Updated: <b><MomentsAgoBadge Value="@todoPageStore.LastStateUpdateTimeUtc" /></b>
</Text>
<p>Created: @appStore.CurrentTime</p>

<AuthorizeView>
    <NotAuthorized>
        <SignInDropdown Why="to use this page" />
    </NotAuthorized>
    <Authorized>
        <WhenException2 Exception="@todoPageStore.FusionQueryException" />
        <WhenException2 Exception="@todoPageStore.FusionCommandException" Title="Update failed!" />
        <Row>
            <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnTablet">
                @{
                    var todos = todoPageStore.PageResponse?.Todos;
                }
                @if (todos == null || todos.Length == 0)
                {
                    <span>No Todos</span>
                }
                else
                {
                    foreach (var todo in todos)
                    {
                        <Addons Margin="Margin.Is3.OnY">
                            <Addon AddonType="AddonType.Start">
                                <AddonLabel>
                                    <Blazorise.Icon Name="@(todo.IsDone ? FontAwesomeIcons.CheckSquare : FontAwesomeIcons.Square)"
                                                    @onclick="_ => InvertDone(todo)" />
                                </AddonLabel>
                            </Addon>
                            <TextEdit TextChanged="text => UpdateTitle(todo, text)" ChangeTextOnKeyPress="false"
                                      Text="@todo.Title" />
                            <Addon AddonType="AddonType.End">
                                <Button Clicked="_ => Remove(todo)" Color="Color.Warning">
                                    <Blazorise.Icon Name="FontAwesomeIcons.Minus" />
                                </Button>
                            </Addon>
                        </Addons>
                    }
                }

                @if (todoPageStore.HasMore)
                {
                    <Button Clicked="_ => LoadMore()" Color="Color.Primary" Margin="Margin.Is3.OnY">
                        Load more <Blazorise.Icon Name="FontAwesomeIcons.AngleDoubleDown" />
                    </Button>
                }

                <Form @onsubmit="_ => Create()" Margin="Margin.Is3.OnY">
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <Button Type="@ButtonType.Submit" Color="Color.Primary">
                                <Blazorise.Icon Name="@FontAwesomeIcons.PlusSquare" />
                            </Button>
                        </Addon>
                        <input @bind="NewTodoTitle" @bind:event="onchange" class="form-control" />
                    </Addons>
                </Form>
            </Column>
        </Row>
    </Authorized>
</AuthorizeView>


@code {
    private string NewTodoTitle { get; set; } = "";
    // AuthState property below seemingly does nothing, right?
    // But try to comment out this line & sign-in + sign-out. See the error badge stays there for a while now?
    // Check your explanation on our Discord: https://discord.gg/EKEwv6d
    [CascadingParameter] protected Task<AuthState> AuthState { get; set; } = null!;

    private void LoadMore()
    {
        todoPageStore.LoadMore();
    }

    private Task InvertDone(Todo todo)
    {
        return todoPageStore.ToggleDone(todo);
    }

    private Task UpdateTitle(Todo todo, string title)
    {
        return todoPageStore.UpdateTitle(todo, title);
    }

    private Task Remove(Todo todo)
    {
        return todoPageStore.Remove(todo);
    }

    private Task Create()
    {
        return todoPageStore.CreateTodo(NewTodoTitle);
    }
}
